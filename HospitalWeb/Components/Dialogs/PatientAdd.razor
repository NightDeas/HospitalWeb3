@page "/patientAdd"
@using DataBase.Enums
@using DataBase.Models
@using DataBase.Operations
@using DataBase.Entities
@inject PatientApiService PatientApiService;
@inject MedCardApiService MedCardApiService;
@inject InsurancePolicyApiService InsurancePolicyApiService;
@inject ISnackbar SbService;
@inject IPhotoService photoService;
@using HospitalWeb.Components.Controls;
@using HospitalWeb.Components.Interfaces
@using HospitalWeb.Components.Services.Api
@using Radzen.Blazor;
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer
<MudDialog @ref="MudDialog" Style="width: 600px">
    <TitleContent>
        <MudText Color="Color.Tertiary" Typo="Typo.h3">@titleContentString</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="@MudForm" @bind-IsValid="valid">
            <MudGrid>
                <MudItem xs="6">
                    <MudText Typo="Typo.h5" Color="Color.Primary">Основная информация</MudText>
                    <MudTextField Label="Фамилия" @bind-Value="patient.LastName" Variant="MudBlazor.Variant.Text" Required="true" RequiredError="@ERROR_REQUIRED"></MudTextField>
                    <MudTextField Label="Имя" @bind-Value="patient.FirstName" Required="true" RequiredError="@ERROR_REQUIRED"></MudTextField>
                    <MudTextField HelperText="При наличии" Label="Отчество" @bind-Value="patient.Patronymic" Required="false" RequiredError="@ERROR_REQUIRED" T="string"></MudTextField>
                    <MudTextField @bind-Value="patient.DateOfBirth" InputType="InputType.Date" Format="yyyy-MM-dd" Label="Дата рождения" Required="true" RequiredError="@ERROR_REQUIRED" T="DateTime"></MudTextField>
                    <MudTextField @bind-Value="patient.Passport" T="string" Label="Серия и номер паспорта" Mask="@(new PatternMask("0000 000000"))" Required="true" RequiredError="@ERROR_REQUIRED"></MudTextField>
                    <GenreControl @bind-Value="patient.GenreId"></GenreControl>
                    <MudText Typo="Typo.h5" Color="Color.Primary">Фотография пациента</MudText>
                    <MudImage Src="@ImageSource" Style="width: 150px; height: 150px"></MudImage>
                    <MudFileUpload T="IBrowserFile" Accept=".png, .jpg" FilesChanged="UploadFile" MaximumFileCount="100">
                        <ActivatorContent>
                            <MudButton Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload">
                                Выбрать фото
                            </MudButton>
                        </ActivatorContent>
                    </MudFileUpload>
                    <MudButton hidden="@(!visibleDeletePhotoButton)" @onclick="DeletePhoto">Удалить фото</MudButton>
                </MudItem>
                <MudItem xs="6">
                    <MudStack>
                        <MudItem>
                            <MudText Typo="Typo.h5" Color="Color.Primary">Страховой полис</MudText>
                            <MudTextField @bind-Value="insurancePolicy.Number" Mask="@(new PatternMask("0000000000000000"))" HelperText="Страховой полис состоит из 16 цифр" For="()=> insurancePolicy.Number" Label="Номер страхового полиса" Required="true" RequiredError="@ERROR_REQUIRED" T="string"></MudTextField>
                            <MudTextField @bind-Value="insurancePolicy.End" Format="yyyy-MM-dd" InputType="InputType.Date" Label="Дата окончания страхового полиса" Required="true" RequiredError="@ERROR_REQUIRED" T="DateTime"></MudTextField>
                        </MudItem>
                        <MudItem>
                            <MudText Typo="Typo.h5" Color="Color.Primary">Для связи</MudText>
                            <MudTextField @bind-Value="patient.Email" Validation="@(new EmailAddressAttribute(){ErrorMessage = "Не валидное поле: Почта"})" Label="Почта" Required="false" T="string"></MudTextField>
                            <MudTextField @bind-Value="patient.Telephone" For="@(() => patient.Telephone)" ErrorText="Не валидное поле" Label="Телефон" Required="false" RequiredError="@ERROR_REQUIRED" T="string"></MudTextField>
                        </MudItem>
                        <MudItem>
                            <MudText Typo="Typo.h5" Color="Color.Primary">Адреса</MudText>
                            <MudTextField @bind-Value="patient.Address" Lines="3" Label="Домашний адрес" Required="true" RequiredError="@ERROR_REQUIRED" T="string"></MudTextField>
                            <MudTextField @bind-Value="patient.WorkAddress" Lines="3" Label="Рабочий адрес" Required="false" RequiredError="@ERROR_REQUIRED" T="string"></MudTextField>
                        </MudItem>

                    </MudStack>
                </MudItem>
                <MudItem xs="12">
                    <MudText Color="Color.Error" Align="Align.Center" hidden="@hiddenGlobalErrorText">Поля с * обязательны для заполнения</MudText>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="ButtonAdd_Click">@titleButonContent</MudButton>
        <MudButton Color="Color.Error" OnClick="Cancel">Отмена</MudButton>
    </DialogActions>
</MudDialog>

@code {


    const string ERROR_REQUIRED = "Обязатльное поле для заполнения";
    private bool valid;
    private bool hiddenGlobalErrorText = true;
    [CascadingParameter]
    private MudDialogInstance MudDialogInstance { get; set; }

    private MudDialog MudDialog;
    private MudForm MudForm;

    private void Submit() => MudDialogInstance.Close(DialogResult.Ok(true));

    private void Cancel() => MudDialogInstance.Cancel();

    Domain.DTOModels.Patient.PatientDTOResponse patient = new();
    Domain.DTOModels.Insurance.InsurancePolicyDTOResponse insurancePolicy = new();
    Domain.DTOModels.MedCard.MedCardDTOResponse medCard = new();


    IBrowserFile photoPatient;

    MudText TitleContent;
    public enum TypeOperation
    {
        Create,
        Edit
    }

    [Parameter]
    public int PatientId { get; set; }

    private string titleContentString = "Управление пациентом";
    private string titleButonContent = "Добавить";
    MudButton buttonAdd;
    protected override async void OnInitialized()
    {
        if (PatientId == 0)
        {
            titleContentString = "Регистрация нового пациента";
            titleButonContent = "Добавить";
        }
        else
        {
            titleContentString = "Редактирование существующего пациента";
            titleButonContent = "Редактировать";
            await LoadData();
            await LoadPhoto();
        }
        StateHasChanged();
    }
}
@code {

    const long PHOTO_SIZE = 10 * 1024 * 1024;
    string ImageSource;
    bool visibleDeletePhotoButton => patient.Photo != null ? true : false;
    //TODO: Повторная загрузка фото(того же) не работает
    //TODO: Валидация работает криво, при успешной валидации всё равно не пропускает, только со второго клика(попробовать убрать valid???)
    private async Task UploadFile(IBrowserFile file)
    {
        if (file == null)
            return;
        this.photoPatient = file;
        Stream stream = file.OpenReadStream(PHOTO_SIZE);
        MemoryStream memoryStream = new();
        await stream.CopyToAsync(memoryStream);
        byte[] photoBytes = memoryStream.ToArray();
        patient.Photo = photoBytes;
        ImageSource = photoService.GetBase64Photo(photoBytes);

        stream.Close();
        memoryStream.Close();
    }

    private async Task LoadPhoto()
    {
        if (patient.Photo == null)
            return;
        ImageSource = photoService.GetBase64Photo(patient.Photo);
    }

    private async Task LoadData()
    {
        patient = await PatientApiService.Get(PatientId);
        medCard = await MedCardApiService.GetByPatient(PatientId);
        insurancePolicy = await InsurancePolicyApiService.GetByPatient(PatientId);

        StateHasChanged();
    }

    private async void DeletePhoto()
    {
        photoPatient = null;
        patient.Photo = new byte[0];
        ImageSource = string.Empty;
        string name = "df";
    }

    async void CloseDialog() => await MudDialog.CloseAsync();

    private async Task ButtonAdd_Click()
    {
        if (patient.Id == 0)
            await CreatePatient();
        else
            await EditPatient();
    }

    async Task CreatePatient()
    {
        if (!valid)
        {
            await this.MudForm.Validate();
            hiddenGlobalErrorText = false;
            return;
        }
        Domain.DTOModels.Patient.PatientDTORequest patientDTORequest = new()
            {
                Address = patient.Address,
                FirstName = patient.FirstName,
                DateOfBirth = patient.DateOfBirth,
                Email = patient.Email,
                GenreId = (Genres)patient.GenreId,
                InsuranceEnd = insurancePolicy.End,
                InsuranceNumber = insurancePolicy.Number,
                LastName = patient.LastName,
                Passport = patient.Passport,
                Patronymic = patient.Patronymic,
                Photo = patient.Photo,
                Telephone = patient.Telephone,
                WorkAddress = patient.WorkAddress
            };
        int tempId = await PatientApiService.Add(patientDTORequest);
        if (tempId == 0)
            throw new();
        SbService.Add("Пациент добавлен в базу", Severity.Success);


    }
    async Task EditPatient()
    {
        if (!valid)
        {
            await this.MudForm.Validate();
            return;
        }
        Domain.DTOModels.Patient.PatientDTORequest patientDTORequest = new()
            {
                Id = patient.Id,
                Address = patient.Address,
                FirstName = patient.FirstName,
                DateOfBirth = patient.DateOfBirth,
                Email = patient.Email,
                GenreId = (Genres)patient.GenreId,
                InsuranceEnd = insurancePolicy.End,
                InsuranceNumber = insurancePolicy.Number,
                LastName = patient.LastName,
                Passport = patient.Passport,
                Patronymic = patient.Patronymic,
                Photo = patient.Photo,
                Telephone = patient.Telephone,
                WorkAddress = patient.WorkAddress
            };
        await PatientApiService.Update(PatientId, patientDTORequest);
        SbService.Add("Данные о пациенте изменены", Severity.Success);
        MudDialogInstance.Close();


    }
}
