@page "/Patients"
@inject IDialogService DialogServices
@* @inject MudBlazor.DialogService DialogService;*@
@inject ISnackbar SnackBarService;
@inject IDefaultOperationDbEntity<Patient> patientServ;
@inject PatientOperationService patientFullDataService;
@inject Services.CookiesService cookieService;
@using System.Net.Http.Json
@using DataBase.Entities
@using DataBase.Operations
@using Keys = Services.CookiesService.Keys;
<MudGrid Spacing="6">
    <MudItem xs="3">
        <MudStack>
            <MudText class="pa-4 m-16" Align="Align.Center" Color="Color.Primary" Typo="Typo.h5">Настройки</MudText>
            <MudTreeView T="string">
                <MudTreeViewItem Text="Отображение полей">
                    <MudTreeView CheckBoxColor="Color.Info" Text="Отображение полей">
                        <MudTreeViewItem>
                            <Content>
                                <MudCheckBox @bind-Value="this[Keys.dateOfBirthColumnVisible]" Label="Дата рождения"></MudCheckBox>
                            </Content>
                        </MudTreeViewItem>
                        <MudTreeViewItem>
                            <Content>
                                <MudCheckBox @bind-Value="@this[Keys.adressColumnVisible]" Label="Адрес"></MudCheckBox>
                            </Content>
                        </MudTreeViewItem>
                        <MudTreeViewItem>
                            <Content>
                                <MudCheckBox @bind-Value="this[Keys.workAdressColumnVisible]" Label="Рабочий адрес"></MudCheckBox>
                            </Content>
                        </MudTreeViewItem>
                        <MudTreeViewItem>
                            <Content>
                                <MudCheckBox @bind-Value="this[Keys.telephoneColumnVisible]" Label="Телефон" />
                            </Content>
                        </MudTreeViewItem>
                        <MudTreeViewItem>
                            <Content>
                                <MudCheckBox @bind-Value="this[Keys.passportColumnVisible]" Label="Паспорт" />
                            </Content>
                        </MudTreeViewItem>
                        <MudTreeViewItem>
                            <Content>
                                <MudCheckBox @bind-Value="this[Keys.genreColumnVisible]" Label="Пол"></MudCheckBox>
                            </Content>
                        </MudTreeViewItem>
                        <MudTreeViewItem>
                            <Content>
                                <MudCheckBox @bind-Value="this[Keys.mailColumnVisible]" Label="Почта"></MudCheckBox>
                            </Content>
                        </MudTreeViewItem>
                        <MudTreeViewItem>
                            <Content>
                                <MudCheckBox @bind-Value="this[Keys.insuranceNumberVisible]" Label="Номер полиса"></MudCheckBox>
                            </Content>
                        </MudTreeViewItem>
                        <MudTreeViewItem>
                            <Content>
                                <MudCheckBox @bind-Value="this[Keys.insuranceEndVisible]" Label="Срок окончания полиса"></MudCheckBox>
                            </Content>
                        </MudTreeViewItem>
                        <MudTreeViewItem>
                            <Content>
                                <MudCheckBox @bind-Value="this[Keys.medCardCreateVisible]" Label="Дата получения полиса"></MudCheckBox>
                            </Content>
                        </MudTreeViewItem>
                    </MudTreeView>
                </MudTreeViewItem>
            </MudTreeView>
        </MudStack>
    </MudItem>
    <MudItem xs="8">
        <MudPaper class="pa-5 ma-2" style="height: 80vh" Outlined="true">
            <RadzenText>Поиск</RadzenText>
            <RadzenTextBox @bind-Value="SearchText" Style="width: 50vh"></RadzenTextBox>
            <MudDataGrid Items="@patients">
                <Columns>
                    <PropertyColumn Property="x => x.Patient.FullName" Title="ФИО" />
                    <PropertyColumn Property="x => x.Patient.DateOfBirth" Format="dd.MM.yyyy" Hidden="@(!_columnVisibility[Keys.dateOfBirthColumnVisible])" Title="Дата рождения" />
                    <PropertyColumn Property="x => x.Patient.Address" Hidden="@(!_columnVisibility[Keys.adressColumnVisible])" Title="Адрес" />
                    <PropertyColumn Property="x => x.Patient.WorkAddress" Hidden="@(!_columnVisibility[Keys.workAdressColumnVisible])" Title="Рабочий адрес" />
                    <PropertyColumn Property="x => x.Patient.Telephone" Hidden="@(!_columnVisibility[Keys.telephoneColumnVisible])" Title="Телефон" />
                    <PropertyColumn Property="x => x.Patient.Email" Hidden="@(!_columnVisibility[Keys.mailColumnVisible])" Title="Почта" />
                    <PropertyColumn Property="x => x.Patient.Genre.Name" Hidden="@(!_columnVisibility[Keys.genreColumnVisible])" Title="Пол" />
                    <PropertyColumn Property="x => x.Patient.Passport" Hidden="@(!_columnVisibility[Keys.passportColumnVisible])" Title="Паспорт" />
                    <PropertyColumn Property="x => x.InsurancePolicy.Number" Hidden="@(!_columnVisibility[Keys.insuranceNumberVisible])" Title="Номер полиса" />
                    <PropertyColumn Property="x => x.InsurancePolicy.End" Format="dd.MM.yyyy" Hidden="@(!_columnVisibility[Keys.insuranceEndVisible])" Title="Срок окончания полиса" />
                    <PropertyColumn Property="x => x.MedCard.Created" Format="dd.MM.yyyy" HiddFormat="dd.MM.yyyy" en="@(!_columnVisibility[Keys.medCardCreateVisible])" Title="Дата создания мед карты" />
                </Columns>
            </MudDataGrid>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" Style="height: 10vh">
        <MudGrid Justify="Justify.Center">
            <MudButton OnClick="OpenDialogAddPatient" Color="Color.Primary">Добавить</MudButton>
            <MudButton OnClick="OpenDialogEditPatient" Color="Color.Primary">Добавить</MudButton>
        </MudGrid>
    </MudItem>
</MudGrid>

@code {
    private readonly Dictionary<Keys, bool> _columnVisibility = new Dictionary<Keys, bool>
    {
        { Keys.dateOfBirthColumnVisible, true },
        { Keys.telephoneColumnVisible, true },
        { Keys.mailColumnVisible, false },
        { Keys.passportColumnVisible, false },
        { Keys.adressColumnVisible, true },
        { Keys.workAdressColumnVisible, false },
        { Keys.genreColumnVisible, false },
        { Keys.insuranceNumberVisible, false },
        { Keys.insuranceEndVisible, false },
        { Keys.medCardCreateVisible, false }
    };

    #region на удаление, после теста

    // bool dateOfBirthColumnVisible = true;
    // bool DateOfBirthColumnVisible
    // {
    //     get => dateOfBirthColumnVisible; set

    //     {
    //         dateOfBirthColumnVisible = value;
    //         SaveParametrInCookie(Keys.dateOfBirthColumnVisible, value);
    //     }
    // }
    // bool telephoneColumnVisible = true;
    // bool TelephoneColumnVisible
    // {
    //     get => telephoneColumnVisible; set
    //     {
    //         telephoneColumnVisible = value;
    //         SaveParametrInCookie(Keys.telephoneColumnVisible, value);
    //     }
    // }
    // bool mailColumnVisible = false;
    // bool MailColumnVisible
    // {
    //     get => mailColumnVisible; set
    //     {
    //         mailColumnVisible = value;
    //         SaveParametrInCookie(Keys.mailColumnVisible, value);
    //     }
    // }
    // bool passportColumnVisible = false;
    // bool PassportColumnVisible
    // {
    //     get => passportColumnVisible; set
    //     {
    //         passportColumnVisible = value;
    //         SaveParametrInCookie(Keys.passportColumnVisible, value);
    //     }
    // }
    // bool adressColumnVisible = true;
    // bool AdressColumnVisible
    // {
    //     get => adressColumnVisible; set
    //     {
    //         adressColumnVisible = value;
    //         SaveParametrInCookie(Keys.adressColumnVisible, value);
    //     }
    // }
    // bool workAdressColumnVisible = false;
    // bool WorkAdressColumnVisible
    // {
    //     get => workAdressColumnVisible; set
    //     {
    //         workAdressColumnVisible = value;
    //         SaveParametrInCookie(Keys.workAdressColumnVisible, value);
    //     }
    // }
    // bool genreColumnVisible = false;
    // bool GenreColumnVisible
    // {
    //     get => genreColumnVisible; set
    //     {
    //         genreColumnVisible = value;
    //         SaveParametrInCookie(Keys.genreColumnVisible, value);
    //     }
    // }
    // bool insuranceNumberVisible = false;
    // bool InsuranceNumberVisible
    // {
    //     get => insuranceNumberVisible; set
    //     {
    //         insuranceNumberVisible = value;
    //         SaveParametrInCookie(Keys.insuranceNumberVisible, value);
    //     }
    // }
    // bool insuranceEndVisible = false;
    // bool InsuranceEndVisible
    // {
    //     get => insuranceEndVisible; set
    //     {
    //         insuranceEndVisible = value;
    //         SaveParametrInCookie(Keys.insuranceEndVisible, value);
    //     }
    // }
    // bool medCardCreateVisible = false;
    // bool MedCardCreateVisible
    // {
    //     get => medCardCreateVisible; set
    //     {
    //         medCardCreateVisible = value;
    //         SaveParametrInCookie(Keys.medCardCreateVisible, value);
    //     }
    // }
    #endregion

    public bool this[Keys key]
    {
        get => _columnVisibility[key]; set
        {
            _columnVisibility[key] = value;
            SaveParametrInCookie(key, value);
        }
    }


    bool isTest = true;


    public int _spcaing = 6;
    public List<DataBase.Models.PatientFullData> patients = new();

    private string searchText;

    public string SearchText
    {
        get => searchText;
        set
        {
            if (value != searchText)
                searchText = value;
        }
    }

    void SaveParametrInCookie(Services.CookiesService.Keys keys, bool parametr)
    {
        string parametrInCookie = parametr ? "1" : "0";
        cookieService.SetCookie(keys, parametrInCookie, 31);
    }
    //TODO: Дописать для всех столбцов
    async Task LoadCookieVisibleColumn()
    {
        foreach (var column in _columnVisibility.Keys)
        {
            _columnVisibility[column] = await cookieService.GetCookie(column) == "0" ? false : true;
        }

    }

    protected override async Task OnInitializedAsync()
    {
        Task.Run(AutoUpdateTable);
        await LoadCookieVisibleColumn();
    }

    private async Task AutoUpdateTable()
    {
        while (true)
        {
            var patients = string.IsNullOrEmpty(SearchText) ? await GetPatients() : await GetPatients(SearchText);
            await InvokeAsync(() => SetPatients(patients));
            if (isTest) SnackBarService.Add("TEST:Таблица обновлена");
            await Task.Delay(1500); // 10 second
        }
    }


    async Task<List<DataBase.Models.PatientFullData>> GetPatients() => await patientFullDataService.GetFullData();
    async Task<List<DataBase.Models.PatientFullData>> GetPatients(string parametr) => await patientFullDataService.GetFullData(parametr);




    void SetPatients(List<DataBase.Models.PatientFullData> patients)
    {
        this.patients = patients;
        StateHasChanged();
    }


    public Task OpenDialogAddPatient()
    {
        var options = new MudBlazor.DialogOptions() { CloseOnEscapeKey = true };
        return DialogServices.ShowAsync<Dialogs.PatientAdd>("test", options);
    }

    public Task OpenDialogEditPatient()
    {
        var options = new MudBlazor.DialogOptions() { CloseOnEscapeKey = true };
        return DialogServices.ShowAsync<Dialogs.PatientEdit>("test", options);
    }
}
