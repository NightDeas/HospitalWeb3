@page "/Patients"
@inject IDialogService DialogServices
@* @inject MudBlazor.DialogService DialogService;*@
@inject ISnackbar SnackBarService;
@inject IDefaultOperationDbEntity<Patient> patientServ;
@inject PatientOperationService patientFullDataService;
@inject Services.CookiesService cookieService;
@inject IPhotoService photoService;

@inject Services.Api.PatientApiService PatientApiService;
@using System.Net.Http.Json
@using DataBase.Entities
@using DataBase.Operations
@using HospitalWeb.Components.Interfaces
@using HospitalWeb.Components.Models
@using Keys = Services.CookiesService.Keys;
@using MudBlazor;
@using MudBlazorFix;
@using static HospitalWeb.Components.Dialogs.PatientAdd
<MudGrid Spacing="6">
    <MudItem xs="12">
        <MudText Style="margin-left: 20px" Color="Color.Tertiary" Typo="Typo.h3">Управление пациентами</MudText>
    </MudItem>
    <MudItem xs="3">
        <MudStack>
            <MudText class="pa-4 m-16" Align="Align.Center" Color="Color.Primary" Typo="Typo.h5">Настройки</MudText>
            <MudTreeView T="string">
                <MudTreeViewItem Text="Отображение полей">
                    <MudTreeView CheckBoxColor="Color.Info" Text="Отображение полей">
                        <MudTreeViewItem>
                            <Content>
                                <MudCheckBox @bind-Value="this[Keys.patDateOfBirthColumnVisible]" Label="Дата рождения"></MudCheckBox>
                            </Content>
                        </MudTreeViewItem>
                        <MudTreeViewItem>
                            <Content>
                                <MudCheckBox @bind-Value="@this[Keys.patAdressColumnVisible]" Label="Адрес"></MudCheckBox>
                            </Content>
                        </MudTreeViewItem>
                        <MudTreeViewItem>
                            <Content>
                                <MudCheckBox @bind-Value="this[Keys.patWorkAdressColumnVisible]" Label="Рабочий адрес"></MudCheckBox>
                            </Content>
                        </MudTreeViewItem>
                        <MudTreeViewItem>
                            <Content>
                                <MudCheckBox @bind-Value="this[Keys.patTelephoneColumnVisible]" Label="Телефон" />
                            </Content>
                        </MudTreeViewItem>
                        <MudTreeViewItem>
                            <Content>
                                <MudCheckBox @bind-Value="this[Keys.patPassportColumnVisible]" Label="Паспорт" />
                            </Content>
                        </MudTreeViewItem>
                        <MudTreeViewItem>
                            <Content>
                                <MudCheckBox @bind-Value="this[Keys.patGenreColumnVisible]" Label="Пол"></MudCheckBox>
                            </Content>
                        </MudTreeViewItem>
                        <MudTreeViewItem>
                            <Content>
                                <MudCheckBox @bind-Value="this[Keys.patMailColumnVisible]" Label="Почта"></MudCheckBox>
                            </Content>
                        </MudTreeViewItem>
                        <MudTreeViewItem>
                            <Content>
                                <MudCheckBox @bind-Value="this[Keys.patInsuranceNumberVisible]" Label="Номер полиса"></MudCheckBox>
                            </Content>
                        </MudTreeViewItem>
                        <MudTreeViewItem>
                            <Content>
                                <MudCheckBox @bind-Value="this[Keys.patInsuranceEndVisible]" Label="Срок окончания полиса"></MudCheckBox>
                            </Content>
                        </MudTreeViewItem>
                        <MudTreeViewItem>
                            <Content>
                                <MudCheckBox @bind-Value="this[Keys.patMedCardCreateVisible]" Label="Дата получения полиса"></MudCheckBox>
                            </Content>
                        </MudTreeViewItem>
                    </MudTreeView>
                </MudTreeViewItem>
            </MudTreeView>
        </MudStack>
    </MudItem>
    <MudItem xs="8">
        <MudPaper class="pa-5 ma-2" style="height: 75vh" Outlined="true">
            <RadzenText>Поиск</RadzenText>
            <RadzenTextBox @bind-Value="SearchText" Style="width: 50vh"></RadzenTextBox>
            <MudDataGrid Style="display: flex; flex-direction: column; height: 90%;"
                         ReadOnly="false" Items="@patients">
                <Columns>
                    <PropertyColumn Property="x => x.FullName" Title="ФИО" />
                    <PropertyColumn Property="x => x.DateOfBirth" Format="dd.MM.yyyy" Hidden="@(!_columnVisibility[Keys.patDateOfBirthColumnVisible])" Title="Дата рождения" />
                    <PropertyColumn Property="x => x.Address" Hidden="@(!_columnVisibility[Keys.patAdressColumnVisible])" Title="Адрес" />
                    <PropertyColumn Property="x => x.WorkAddress" Hidden="@(!_columnVisibility[Keys.patWorkAdressColumnVisible])" Title="Рабочий адрес" />
                    <PropertyColumn Property="x => x.Telephone" Hidden="@(!_columnVisibility[Keys.patTelephoneColumnVisible])" Title="Телефон" />
                    <PropertyColumn Property="x => x.Email" Hidden="@(!_columnVisibility[Keys.patMailColumnVisible])" Title="Почта" />
                    <PropertyColumn Property="x => x.Genre" Hidden="@(!_columnVisibility[Keys.patGenreColumnVisible])" Title="Пол" />
                    <PropertyColumn Property="x => x.Passport" Hidden="@(!_columnVisibility[Keys.patPassportColumnVisible])" Title="Паспорт" />
                    <PropertyColumn Property="x => x.InsuranceNumber" Hidden="@(!_columnVisibility[Keys.patInsuranceNumberVisible])" Title="Номер полиса" />
                    <PropertyColumn Property="x => x.InsuranceDateEnd" Format="dd.MM.yyyy" Hidden="@(!_columnVisibility[Keys.patInsuranceEndVisible])" Title="Срок окончания полиса" />
                    <PropertyColumn Property="x => x.MedCardCreated" Hidden="@(!_columnVisibility[Keys.patMedCardCreateVisible])" Format="dd.MM.yyyy" Title="Дата создания мед карты" />
                    <TemplateColumn>
                        <CellTemplate>
                            <MudIconButton  Size="Size.Small" Icon="@Icons.Material.Filled.Edit" OnClick="@(() => OpenDialogPatient(context.Item.Id))"></MudIconButton>
                        </CellTemplate>
                    </TemplateColumn>
                    </Columns>
            </MudDataGrid>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" Style="height: 15vh">
        <MudGrid Justify="Justify.Center">
            <MudButton Style="font-size:22px" OnClick="() => OpenDialogPatient(0)" Color="Color.Primary">Добавить</MudButton>
        </MudGrid>
    </MudItem>
</MudGrid>

@code {
    private Dictionary<Keys, bool> _columnVisibility = new Dictionary<Keys, bool>
    {
        { Keys.patDateOfBirthColumnVisible, true },
        { Keys.patTelephoneColumnVisible, true },
        { Keys.patMailColumnVisible, false },
        { Keys.patPassportColumnVisible, false },
        { Keys.patAdressColumnVisible, true },
        { Keys.patWorkAdressColumnVisible, false },
        { Keys.patGenreColumnVisible, false },
        { Keys.patInsuranceNumberVisible, false },
        { Keys.patInsuranceEndVisible, false },
        { Keys.patMedCardCreateVisible, false }
    };



    public bool this[Keys key]
    {
        get => _columnVisibility[key]; set
        {
            _columnVisibility[key] = value;
            cookieService.SaveParametrInCookie(key, value);
        }
    }


    bool isTest = true;


    public int _spcaing = 6;
    public List<Domain.DTOModels.Patient.PatientDTOResponseTableData> patients = new();
    public DataBase.Models.PatientFullData patientFullData;

    private string searchText;

    public string SearchText
    {
        get => searchText;
        set
        {
            if (value != searchText)
                searchText = value;
        }
    }
   

    protected override async Task OnInitializedAsync()
    {
        Task.Run(AutoUpdateTable);
        _columnVisibility = await cookieService.LoadCookieVisibleColumn(_columnVisibility);
    }

    private async Task AutoUpdateTable()
    {
        while (true)
        {
            var patients = string.IsNullOrEmpty(SearchText) ? await GetPatients() : await GetPatients(SearchText);
            await InvokeAsync(() => SetPatients(patients));
            if (isTest) SnackBarService.Add("TEST:Таблица обновлена");
            await Task.Delay(1500); // 1.5 second
        }
    }


    async Task<List<Domain.DTOModels.Patient.PatientDTOResponseTableData>> GetPatients() => await PatientApiService.GetTableDatasAsync();
    async Task<List<Domain.DTOModels.Patient.PatientDTOResponseTableData>> GetPatients(string parametr) => await PatientApiService.GetTableDatasAsync(parametr);



    void SetPatients(List<Domain.DTOModels.Patient.PatientDTOResponseTableData> patients)
    {
        this.patients = patients;
        StateHasChanged();
    }
    // public Task OpenDialogPatient() => OpenDialogPatient();

    public Task OpenDialogPatient(int patientId)
    {
        var parametrs = new DialogParameters<Dialogs.PatientAdd>
        {
            {x=> x.PatientId, patientId }
        };
        var options = new MudBlazor.DialogOptions() { CloseOnEscapeKey = true };
        return DialogServices.ShowAsync<Dialogs.PatientAdd>("test", parametrs, options);
    }
}
